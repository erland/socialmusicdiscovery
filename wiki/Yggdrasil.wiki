#summary About the SMD rich client Yggdrasil.
http://socialmusicdiscovery.googlecode.com/svn/yggdrasil/trunk/src/smd-rcp-client-plugin/icons/logo/splash.png

= Introduction =

*Yggdrasil* is a rich client for the Social Music Discovery (SMD) project, built on the Eclipse Rich Client Platform ([http://wiki.eclipse.org/index.php/Rich_Client_Platform RCP]).

The name *Yggdrasil* is taken from [http://en.wikipedia.org/wiki/Yggdrasil Norse mythology]; it was said to be the world tree around which the nine worlds existed. The branches of Yggdrasil extend far into the heavens, and the tree is supported by three roots that extend far away into other locations. 

In SMD, Yggdrasil connects metadata in the music library and allows the user to maintain both hard facts and subjective opinions about local or online music. It may not be the world tree around which everything revolves, but is the view into this tree - the SMD repository - and the instrument for connecting the tree with heavens and other locations.

Yggdrasil is not primarily an instrument for enjoying music, more about paving the ground for listening pleasure.

*Legalese* 

The preliminary logo was downloaded from [http://commons.wikimedia.org/wiki WikiMedia] and slightly augmented with text. Credits and license details can be found [http://socialmusicdiscovery.googlecode.com/svn/yggdrasil/trunk/src/smd-rcp-client-plugin/icons/logo/License.txt here].

==WARNING==
Yggdrasil is in the process of moving out of the prototype directory. Meanwhile, most information on the [PrototypeRCPClient Prototype RCP Client] is still valid, and the prototype client is probably more stable.

This disclaimer will be removed when the yggdrasil relocation and refactoring seems stable.
#summary Description of RCP Client

= To Download and Run =
Latest pre-compiled nightly builds of RCP Client can be found here:
  * http://downloads.socialmusicdiscovery.org/smd-yggdrasil

Download, unzip into desired location, drill down to find the launcher (on Windows, this will be called yggdrasil.exe).

More info to be added ...

= To Develop =
Source code is available here: http://socialmusicdiscovery.googlecode.com/svn/yggdrasil

Brief instructions on what you need to do to set up the development environment is available in the Readme-file:
  * http://socialmusicdiscovery.googlecode.com/svn/yggdrasil/smd-rcp-client-plugin/ReadMe.txt

== Design Guidelines ==
Some brief and preliminary thoughts on the design principles for the RCP client. Comments expected and welcome!

  * JFace 
    * JFace offers a convenience layer on top of SWT, making it much easier to work with. Application code should rarely touch an SWT component directly.
    * JFace data binding is perhaps the most important discriminator to separate a rich client from a thin. We bind widgets to properties using data binding, and we use observable label providers in grids. 
    * Set rather than List or Collection. Design rationale: to ensure proper data binding and stable collections, we need a distinct collection type. By definition (?) a relational DB returns unique instances in undefined order. All grids sort rows on user request, and a Set is easier to diff/merge in general. All in all, Sets fit the bill better than Lists, and hence all core signatures accept and return Sets unless there is a specific reason. 
  * Menus, Actions and Commands
    * Menu items (both main and popup) are primarily declared thru extension points, not attached directly to viewers. This makes common commands universally available; whenever and wherever an Artist is selected, a menu with all applicable Artist commands is available.
    * Actions vs. Commands - Commands are "new school" and more powerful, Actions are "old school" and less powerful. However, the command framework is pretty abstract and - to most people - confusing. We should use Commands to define  "global" actions that we bind to keyboard shortcuts, but we use regular Actions and Runnables where a Command isn't required.
  * Nebula - if we want to stay RAP-compatible, we can probably *not* use any Nebula components. In time, we may offer alternative implementations (RCP vs RAP). If we ignore RAP compliance, these Nebula components would be of particular interest:
    * Grid - the Nebula grid offers most of the features that the standard Eclipse Tables and Trees lack. All lists, trees and tables could be replaced by the grid.
    * PShelf - could replace !ExpandBar as the primary navigation widget.
  * UI Style and "Skins"
    * Now (Eclipse 3.x): we run with the default appearance produced by the Forms Toolkit. 
    * Then (Eclipse 4): we use the new (CSS-oriented) way of styling the application. It is too much work to do that using the current platform.
  * Target platform - a pre-configured RCP target platform is downloaded and provided by Maven. This includes the RCP base framework and all desired plug-ins to avoid the dependency on individual installations.
  * Plug-in Component structure - we separate the client in a few main parts. The basic idea is to have a small base product that is easily installed and rarely updated, and to use an update site to maintain the other components.
    * Installer - an almost empty "bootstrap" to allow installation/update of other components from update site
    * Product - splash screens, license, intro pages, etc
    * Foundation - fundamental UI components; custom widgets, utils, common abstractions, ...
    * Server Connection (Data Source) - abstracts the server facade and produces UI-friendly objects (lazily loaded, observable, named ...)
    * UI plugins:
      * Navigator UI - A PShelf presentation of "shallow" objects, with the ability to "inflate" any object and open an editor on it
      * Core model editors - !EditorPart subclasses that operate on SMDEntity instances from the core model
      * Subjective model editors - !EditorPart subclasses that operate on SMD instances from the subjective model
  * i18N 
    * At the time of writing, the prototype is not localizable. We should of course change this at some point in time, using the built-in Eclipse/Java mechanisms to do so.
    * character set is UTF-8. All projects should have this setting defined, to avoid dependencies and failures due to bad workspace settings.

== Developer Notes ==
A few notes that may or may not be useful for RCP developers.
=== "FAQ" ===
  * Launcher doesn't launch  
    * Q: Sometime the launcher just won't launch stuff from within the IDE, even though everything seems to be in order. 
    * A: delete the launcher form the "Run Configurations" menu, and re-launch it by right-clicking the checked in launcher ("Run As - Eclipse Application")

== External Links ==
 * Peer's Eclipse links: http://snipurl.com/p2r-eclipse
 * Eclipse for RCP and RAP developers: http://www.eclipse.org/downloads/packages/eclipse-rcp-and-rap-developers/indigor 
 * SWT Designer (part of !WindowBuilder)
   * Eclipse 3.7: http://www.eclipse.org/windowbuilder
   * Google (for Eclipse 3.6): http://code.google.com/javadevtools/wbpro/installation/updatesite_3.6.html
 * Maven
   * !M2Eclipse (M2E): http://www.eclipse.org/m2e
     * Forum: http://www.eclipse.org/forums/index.php/f/61
     * !SonaType: http://m2eclipse.sonatype.org
   * IAM (Eclipse Integration for Apache Maven)
     * http://www.eclipse.org/iam 
     * Update site: http://q4e.googlecode.com/svn/trunk/updatesite-iam
 * Equinox/p2: http://wiki.eclipse.org/Equinox/p2
 * Tycho: http://www.eclipse.org/tycho
   * Forum: http://www.eclipse.org/forums/index.php?t=thread&frm_id=183
 * Nebula: http://www.eclipse.org/nebula
 * Eclipse snippets, examples and tutorials:
   * RCP:
     * http://www.vogella.de/articles/EclipseRCP/article.html
   * JFace:
     * http://wiki.eclipse.org/JFace_Data_Binding/Snippets#Running_the_Snippets
     * http://wiki.eclipse.org/index.php/JFaceSnippets
   * SWT:
     * http://www.eclipse.org/swt/snippets/
     * http://www.eclipse.org/swt/examples.php
   * Build and Deploy
     * Building (Eclipsepedia): http://wiki.eclipse.org/Building
     * Eclipse PDE Build - Tutorial: http://www.vogella.de/articles/EclipsePDEBuild/article.html