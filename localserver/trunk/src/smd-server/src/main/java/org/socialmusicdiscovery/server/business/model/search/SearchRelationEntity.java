/*
 *  Copyright 2010-2011, Social Music Discovery project
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 *      * Redistributions of source code must retain the above copyright
 *        notice, this list of conditions and the following disclaimer.
 *      * Redistributions in binary form must reproduce the above copyright
 *        notice, this list of conditions and the following disclaimer in the
 *        documentation and/or other materials provided with the distribution.
 *      * Neither the name of Social Music Discovery project nor the
 *        names of its contributors may be used to endorse or promote products
 *        derived from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED. IN NO EVENT SHALL SOCIAL MUSIC DISCOVERY PROJECT BE LIABLE FOR ANY
 *  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 *  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 *  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package org.socialmusicdiscovery.server.business.model.search;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.socialmusicdiscovery.server.business.model.SMDIdentity;
import org.socialmusicdiscovery.server.business.model.SMDIdentityReferenceEntity;
import org.socialmusicdiscovery.server.business.model.classification.Classification;
import org.socialmusicdiscovery.server.business.model.core.Contributor;

import javax.persistence.Column;
import javax.persistence.Id;
import javax.persistence.IdClass;
import javax.persistence.MappedSuperclass;
import java.io.Serializable;

/**
 * Abstract class that represents all search relation entities. The search relation entities are not owning any business data instead they are just
 * generated by {@link org.socialmusicdiscovery.server.business.logic.SearchRelationPostProcessor} to make shortcuts between entities in
 * the domain model which normally would require multiple JOIN's when connecting in a JPA query.
 * Search relation entities is also used to represent the aggregated information, for example the total list of contributors from a release are those
 * directly tied to the release but also those tied to the recording, work, recording session which is related to the release. The search relation
 * entities will represent the complete aggregated list to speed up joining during browse and search operations.
 */
@MappedSuperclass
@IdClass(SearchRelationEntity.PK.class)
public abstract class SearchRelationEntity {

    /**
     * Represents the primary key in all search relation entities, see {@link SearchRelationEntity} and its sub classes for more information
     */
    public static class PK implements Serializable {
        public String id;
        public String referenceType;
        public String reference;
        public String type;

        public PK() {}
        public PK(String id, String referenceType, String reference, String type) {
            this.id = id;
            this.referenceType = referenceType;
            this.reference = reference;
            this.type = type;
        }
        @Override
        public int hashCode() {
            return HashCodeBuilder.reflectionHashCode(this);
        }

        @Override
        public boolean equals(Object o) {
            return EqualsBuilder.reflectionEquals(this, o);
        }
    }
    /** Identity of the entity that owns the search relation */
    @Id
    @Column(length = 36)
    private String id;

    /** Type of entity which the search relation points to, this is typically fille with values from {@link SMDIdentityReferenceEntity#typeForClass} */
    @Id
    private String referenceType;

    /** Identity of the entity which the search relation points to */
    @Id
    @Column(length = 36)
    private String reference;

    /** Sub type of entity which the search relation points to, this is for example filled with values from
     * {@link org.socialmusicdiscovery.server.business.model.classification.ClassificationEntity#type} or
     * {@link org.socialmusicdiscovery.server.business.model.core.ContributorEntity#type}*/
    @Id
    private String type;

    /**
     * Constructs a new empty search relation, the individual set methods needs to be called separately before this object can be used for anything
     */
    public SearchRelationEntity() {
        setType("");
    }

    /**
     * Constructs a search relation related to the specific {@link SMDIdentity}, this will leave the {@link #type} field empty
     * @param identity The owner
     * @param reference The entity which the search relation should be related to
     */
    public SearchRelationEntity(SMDIdentity identity, SMDIdentity reference) {
        setId(identity.getId());
        setReference(reference);
        setType("");
    }

    /**
     * Constructs a search relation related to a {@link Contributor}, this will fill the {@link #type} field with the
     * value from {@link org.socialmusicdiscovery.server.business.model.core.Contributor#getType()}.
     * The {@link org.socialmusicdiscovery.server.business.model.core.Contributor#getArtist()} will be used to fill the {@link #reference} field.
     * @param identity The owner
     * @param contributor The contributor
     */
    public SearchRelationEntity(SMDIdentity identity, Contributor contributor) {
        setId(identity.getId());
        setReference(contributor);
    }

    /**
     * Constructs a search relation related to a {@link Classification}, this will fill the {@link #type} field with the
     * value from {@link org.socialmusicdiscovery.server.business.model.classification.Classification#getType()}
     * @param identity The owner
     * @param classification The classification
     */
    public SearchRelationEntity(SMDIdentity identity, Classification classification) {
        setId(identity.getId());
        setReference(classification);
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getReferenceType() {
        return referenceType;
    }

    public void setReferenceType(String referenceType) {
        this.referenceType = referenceType;
    }

    public String getReference() {
        return reference;
    }

    public void setReference(String reference) {
        this.reference = reference;
    }

    /**
     * Sets the {@link #reference} and {@link #referenceType} fields based on the specified {@link SMDIdentity}
     * @param reference The {@link SMDIdentity} to use
     */
    public void setReference(SMDIdentity reference) {
        setReferenceType(SMDIdentityReferenceEntity.typeForClass(reference.getClass()));
        setReference(reference.getId());
    }

    /**
     * Sets the {@link #reference} and {@link #referenceType} and {@link #type} }fields based on the specified {@link Contributor}.
     * @param contributor The {@link Contributor} to use
     */
    public void setReference(Contributor contributor) {
        setReferenceType(SMDIdentityReferenceEntity.typeForClass(contributor.getArtist().getClass()));
        setReference(contributor.getArtist().getId());
        setType(contributor.getType());
    }

    /**
     * Sets the {@link #reference} and {@link #referenceType} and {@link #type} }fields based on the specified {@link Classification}
     * @param classification The {@link Classification} to use
     */
    public void setReference(Classification classification) {
        setReferenceType(SMDIdentityReferenceEntity.typeForClass(classification.getClass()));
        setReference(classification.getId());
        setType(classification.getType());
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    /**
     * Hash code implementation that looks at all individual fields in the search relation
     * @return The hash code
     */
    @Override
    public int hashCode() {
        return HashCodeBuilder.reflectionHashCode(this);
    }

    /**
     * Equals implementation that looks at all individual fields in the search relations
     * @param o The object to compare with
     * @return true if equal
     */
    @Override
    public boolean equals(Object o) {
        return EqualsBuilder.reflectionEquals(this, o);
    }
}
